<h1> Edit Your Custom PC </h1>

<%= bootstrap_form_with model: @build_pc, local: true, data: { turbo: false } do |f| %>
  <div class="field">
    <%= f.text_field :name,
          label: 'PC Name',
          class: 'input hover-info',
          data: { description: 'Enter the name of your PC.' } %>

    <%= f.select :cpu, BuildPc::CPU_PRICES.keys,
          { include_blank: true, label: 'CPU' },
          {
            id: 'cpu-select',
            class: 'hover-info',
            data: { description: @descriptions[:cpu].to_json }
          } %>

    <%= f.select :gpu, BuildPc::GPU_PRICES.keys,
          { include_blank: true, label: 'GPU' },
          {
            id: 'gpu-select',
            class: 'hover-info',
            data: { description: @descriptions[:gpu].to_json }
          } %>

    <%= f.select :ram, BuildPc::RAM_PRICES.keys,
          { include_blank: true, label: 'RAM' },
          {
            id: 'ram-select',
            class: 'hover-info',
            data: { description: @descriptions[:ram].to_json }
          } %>

    <%= f.select :storage, BuildPc::STORAGE_PRICES.keys,
          { include_blank: true, label: 'Storage' },
          {
            id: 'storage-select',
            class: 'hover-info',
            data: { description: @descriptions[:storage].to_json }
          } %>

    <%= f.select :mobo, BuildPc::MOBO_PRICES.keys,
          { include_blank: true, label: 'MOBO' },
          {
            id: 'mobo-select',
            class: 'hover-info',
            data: { description: @descriptions[:mobo].to_json }
          } %>

    <%= f.text_field :price,
          label: 'Total',
          readonly: true,
          id: 'price-field',
          class: 'hover-info' %>
  </div>

  <%= f.submit "Update", class: "field-btn" %>
<% end %>

<div id="info-box" class="info-box">
  Select a part and hover to see more information.
</div>

<script>
  // Run on initial page load
  document.addEventListener("DOMContentLoaded", function () {
    const prices = {
      cpu:     <%= BuildPc::CPU_PRICES.to_json.html_safe %>,
      gpu:     <%= BuildPc::GPU_PRICES.to_json.html_safe %>,
      ram:     <%= BuildPc::RAM_PRICES.to_json.html_safe %>,
      storage: <%= BuildPc::STORAGE_PRICES.to_json.html_safe %>,
      mobo:    <%= BuildPc::MOBO_PRICES.to_json.html_safe %>
    };

    const selects = {
      cpu:     document.getElementById("cpu-select"),
      gpu:     document.getElementById("gpu-select"),
      ram:     document.getElementById("ram-select"),
      storage: document.getElementById("storage-select"),
      mobo:    document.getElementById("mobo-select")
    };

    const priceField = document.getElementById("price-field");

    function calculateTotal() {
      let total = 0;

      for (const component in selects) {
        const selected = selects[component]?.value;
        if (selected && prices[component][selected]) {
          total += prices[component][selected];
        }
      }

      priceField.value = total.toFixed(2);
      const pricePreview = document.getElementById('price-preview');
      if (pricePreview) pricePreview.textContent = total.toFixed(2);
    }

    for (const component in selects) {
      const sel = selects[component];
      if (sel) sel.addEventListener("change", calculateTotal);
    }

    calculateTotal();
  });

  // Reload after Turbo
  document.addEventListener("turbo:load", function () {
    const prices = {
      cpu:     <%= BuildPc::CPU_PRICES.to_json.html_safe %>,
      gpu:     <%= BuildPc::GPU_PRICES.to_json.html_safe %>,
      ram:     <%= BuildPc::RAM_PRICES.to_json.html_safe %>,
      storage: <%= BuildPc::STORAGE_PRICES.to_json.html_safe %>,
      mobo:    <%= BuildPc::MOBO_PRICES.to_json.html_safe %>
    };

    const selects = {
      cpu:     document.getElementById("cpu-select"),
      gpu:     document.getElementById("gpu-select"),
      ram:     document.getElementById("ram-select"),
      storage: document.getElementById("storage-select"),
      mobo:    document.getElementById("mobo-select")
    };

    const priceField = document.getElementById("price-field");

    function calculateTotal() {
      let total = 0;

      for (const component in selects) {
        const selected = selects[component]?.value;
        if (selected && prices[component][selected]) {
          total += prices[component][selected];
        }
      }

      priceField.value = total.toFixed(2);
      const pricePreview = document.getElementById('price-preview');
      if (pricePreview) pricePreview.textContent = total.toFixed(2);
    }

    for (const component in selects) {
      const sel = selects[component];
      if (sel) sel.addEventListener("change", calculateTotal);
    }

    calculateTotal();
  });

  function initializeHoverDescriptions() {
  const fields = document.querySelectorAll(".hover-info");
  const infoBox = document.getElementById("info-box");

  fields.forEach(field => {
    field.addEventListener("mouseenter", () => {
      const descriptions = JSON.parse(field.dataset.description);
      const selectedOption = field.options[field.selectedIndex].text;
      infoBox.textContent = descriptions[selectedOption] || "No description available.";
    });

    field.addEventListener("mouseleave", () => {
      infoBox.textContent = "Select a part and hover to see more information.";
    });
  });
}

document.addEventListener("DOMContentLoaded", () => {
  initializeHoverDescriptions();
});

document.addEventListener("turbo:load", () => {
  initializeHoverDescriptions();
});
</script>
